from PyQt6.QtWidgets import (QMainWindow, QVBoxLayout, QHBoxLayout, QWidget, QLabel, QSizePolicy, QScrollArea,
                            QComboBox, QPushButton, QCheckBox, QLineEdit, QMessageBox, QSpacerItem,
                            QFileDialog, QStatusBar)
from PyQt6.QtCore import Qt, pyqtSignal, QEvent
from PyQt6.QtGui import QPixmap, QImage
from utils.logger import AppLogger
import os

class MainWindowUI(QMainWindow):
    # –°–∏–≥–Ω–∞–ª—ã
    start_processing = pyqtSignal()
    stop_processing = pyqtSignal()
    toggle_landmarks = pyqtSignal(bool)
    model_selected = pyqtSignal(str)
    load_model_requested = pyqtSignal()
    video_source_changed = pyqtSignal(str, int)
    rtsp_selected = pyqtSignal(str)
    add_rtsp_requested = pyqtSignal()
    manage_models_requested = pyqtSignal()

    def set_style_sheet(self, stylesheet):
        self.setStyleSheet(stylesheet)
        for child in self.findChildren(QWidget):
            child.setStyleSheet(stylesheet)

    def __init__(self, parent=None):
        super().__init__(parent)
        self._connections_initialized = False  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Ç—Ä–∏–±—É—Ç
        self._init_ui()
        self._connect_signals()
        self._setup_validation()
        self.setMinimumSize(1000, 800)
        
    def _init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–æ–º–ø–æ–Ω–æ–≤–∫–æ–π"""
        self.setWindowTitle("–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –°–ò–ó")
        
        # –ì–ª–∞–≤–Ω—ã–π –≤–∏–¥–∂–µ—Ç –∏ layout
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.main_layout = QVBoxLayout(self.central_widget)
        self.main_layout.setSpacing(10)
        self.main_layout.setContentsMargins(15, 15, 15, 15)
        
        # 1. –í–∏–¥–µ–æ –¥–∏—Å–ø–ª–µ–π (—Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å—é)
        self._init_video_display()
        
        # 2. –ü–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ (—Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–æ–º–ø–æ–Ω–æ–≤–∫–æ–π)
        self._init_model_panel()
        
        # 3. –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –¥–ª—è –ª—É—á—à–µ–π –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏)
        self._init_control_panel()
        
        # 4. –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self._init_status_bar()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self._update_source_type(0)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–∏—Ç–∏–∫ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self._setup_size_policies()

    def _init_video_display(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ –¥–∏—Å–ø–ª–µ—è —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —Ä–∞—Å—Ç—è–∂–µ–Ω–∏–µ–º"""
        self.scroll_area = QScrollArea()
        self.scroll_area.setWidgetResizable(False)  # –í–∞–∂–Ω–æ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤
        self.scroll_area.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.video_container = QWidget()
        self.video_container.setSizePolicy(
            QSizePolicy.Policy.Expanding,
            QSizePolicy.Policy.Expanding
        )
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        self.video_layout = QHBoxLayout(self.video_container)
        self.video_layout.setContentsMargins(0, 0, 0, 0)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.center_container = QWidget()
        self.center_container.setSizePolicy(
            QSizePolicy.Policy.Expanding,
            QSizePolicy.Policy.Expanding
        )
        
        self.center_layout = QVBoxLayout(self.center_container)
        self.center_layout.setContentsMargins(0, 0, 0, 0)
        self.center_layout.addStretch(1)  # –ì–∏–±–∫–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å–≤–µ—Ä—Ö—É
        
        # –í–∏–¥–∂–µ—Ç –¥–ª—è –≤–∏–¥–µ–æ
        self.video_display = QLabel()
        self.video_display.setObjectName("videoDisplay")
        self.video_display.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.video_display.setMinimumSize(640, 480)
        
        self.center_layout.addWidget(self.video_display)
        self.center_layout.addStretch(1)  # –ì–∏–±–∫–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å–Ω–∏–∑—É
        
        self.video_layout.addStretch(1)  # –ì–∏–±–∫–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å–ª–µ–≤–∞
        self.video_layout.addWidget(self.center_container)
        self.video_layout.addStretch(1)  # –ì–∏–±–∫–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å–ø—Ä–∞–≤–∞
        
        self.scroll_area.setWidget(self.video_container)
        self.main_layout.addWidget(self.scroll_area, stretch=1)

    def _init_model_panel(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
        self.model_panel = QWidget()
        model_layout = QHBoxLayout(self.model_panel)
        model_layout.setContentsMargins(0, 0, 0, 0)
        model_layout.setSpacing(10)
        
        self.model_label = QLabel("–ú–æ–¥–µ–ª—å:   ")
        self.model_combo = QComboBox()
        self.model_combo.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Fixed)
        
        self.activate_model_btn = QPushButton("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å")
        
        self.manage_models_btn = QPushButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏")
        
        model_layout.addWidget(self.model_label)
        model_layout.addWidget(self.model_combo, stretch=1)
        model_layout.addWidget(self.activate_model_btn)
        model_layout.addWidget(self.manage_models_btn)
        
        self.main_layout.addWidget(self.model_panel)

    def _init_control_panel(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å—é"""
        self.control_panel = QWidget()
        control_layout = QVBoxLayout(self.control_panel)
        control_layout.setContentsMargins(0, 0, 0, 0)
        control_layout.setSpacing(10)
        
        # –í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞: –≤—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        source_row = QWidget()
        source_layout = QHBoxLayout(source_row)
        source_layout.setContentsMargins(0, 0, 0, 0)
        source_layout.setSpacing(10)
        
        self.source_label = QLabel("–ò—Å—Ç–æ—á–Ω–∏–∫:")
        self.source_type = QComboBox()
        self.source_type.addItems(["–ö–∞–º–µ—Ä–∞", "–í–∏–¥–µ–æ—Ñ–∞–π–ª", "RTSP –ø–æ—Ç–æ–∫"])
        self.source_type.setFixedWidth(120)
        
        self.source_input = QLineEdit()
        self.source_input.setProperty("valid", "unknown")
        self.source_input.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Fixed)
        
        self.browse_btn = QPushButton("–û–±–∑–æ—Ä")
        
        self.rtsp_combo = QComboBox()
        self.rtsp_combo.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Fixed)
        
        self.add_rtsp_btn = QPushButton("+")
        
        source_layout.addWidget(self.source_label)
        source_layout.addWidget(self.source_type)
        source_layout.addWidget(self.source_input, stretch=1)
        source_layout.addWidget(self.browse_btn)
        source_layout.addWidget(self.rtsp_combo, stretch=1)
        source_layout.addWidget(self.add_rtsp_btn)
        
        # –ù–∏–∂–Ω—è—è —Å—Ç—Ä–æ–∫–∞: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        bottom_row = QWidget()
        bottom_layout = QHBoxLayout(bottom_row)
        bottom_layout.setContentsMargins(0, 0, 0, 0)
        bottom_layout.setSpacing(10)
        
        self.landmarks_check = QCheckBox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏")
        self.landmarks_check.setChecked(False)
        spacer = QSpacerItem(20, 20, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum)
        
        self.start_btn = QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑")
        self.start_btn.setObjectName("startButton")
        self.start_btn.setEnabled(False)
        
        bottom_layout.addWidget(self.landmarks_check)
        bottom_layout.addItem(spacer)
        bottom_layout.addWidget(self.start_btn)
        
        control_layout.addWidget(source_row)
        control_layout.addWidget(bottom_row)
        
        self.main_layout.addWidget(self.control_panel)

    def _init_status_bar(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
        self.status_bar = QStatusBar()
        self.status_bar.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Fixed)
        self.setStatusBar(self.status_bar)
        
        self.theme_btn = QPushButton("üåô")
        self.theme_btn.setObjectName("themeButton")
        self.theme_btn.setFixedSize(30, 30)
        self.status_bar.addPermanentWidget(self.theme_btn)

    def _setup_size_policies(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–∏—Ç–∏–∫ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        # –í–∏–¥–∂–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        expand_horizontal = [
            self.video_display,
            self.model_combo,
            self.source_input,
            self.rtsp_combo
        ]
        
        for widget in expand_horizontal:
            widget.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Fixed)
        
        # –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–ª–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
        self.central_widget.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)

    def _setup_validation(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
        self.source_input.textChanged.connect(self._validate_current_input)
        self.source_type.currentIndexChanged.connect(self._update_validation)
        self._update_validation()

    def _update_validation(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∏–ø –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–∏–ø–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
        self._validate_current_input(self.source_input.text())

    def _validate_current_input(self, text):
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–≤–æ–¥ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
        source_type = self.source_type.currentIndex()
        text = text.strip()
        
        try:
            if source_type == 0:  # –ö–∞–º–µ—Ä–∞
                is_valid, tooltip = self._validate_camera(text)
            elif source_type == 1:  # –í–∏–¥–µ–æ—Ñ–∞–π–ª
                is_valid, tooltip = self._validate_video(text)
            elif source_type == 2:  # RTSP
                is_valid, tooltip = self._validate_rtsp(text)
            else:
                is_valid, tooltip = False, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞"
        except Exception as e:
            is_valid, tooltip = False, f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}"
        
        self.source_input.setToolTip(tooltip)
        self._set_input_validity(is_valid)
        

    def _validate_camera(self, text):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞ –∫–∞–º–µ—Ä—ã"""
        try:
            index = int(text)
            valid = index >= 0
            tooltip = "–í–∞–ª–∏–¥–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–∞–º–µ—Ä—ã" if valid else "–ò–Ω–¥–µ–∫—Å –∫–∞–º–µ—Ä—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ‚â• 0"
            return valid, tooltip
        except ValueError:
            return False, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π –∏–Ω–¥–µ–∫—Å –∫–∞–º–µ—Ä—ã (0, 1, ...)"

    def _validate_video(self, text):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø—É—Ç–∏ –∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É"""
        if not text:
            return False, "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É"
        
        valid = text.lower().endswith(('.mp4', '.avi', '.mov', '.mkv'))
        if not valid:
            return False, "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .mp4, .avi, .mov, .mkv"
        
        exists = os.path.exists(text)
        return exists, "–§–∞–π–ª –Ω–∞–π–¥–µ–Ω" if exists else "–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"

    def _validate_rtsp(self, text):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å RTSP URL"""
        if not text:
            return False, "–í–≤–µ–¥–∏—Ç–µ RTSP URL"
        
        valid = text.startswith('rtsp://') and len(text) > 10
        return valid, "–í–∞–ª–∏–¥–Ω—ã–π RTSP URL" if valid else "URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å rtsp:// –∏ –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤"

    def _set_input_validity(self, is_valid):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∏–ª—å –ø–æ–ª—è –≤–≤–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏"""
        try:
            self.source_input.setProperty("valid", str(is_valid).lower())
            self.source_input.style().unpolish(self.source_input)
            self.source_input.style().polish(self.source_input)
            self.source_input.update()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è: {e}")

    def update_theme(self, dark_mode):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å dark-mode –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
            if dark_mode:
                self.setProperty("class", "dark-mode")
            else:
                self.setProperty("class", "")
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤—Å–µ—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
            for child in self.findChildren(QWidget):
                child.style().unpolish(child)
                child.style().polish(child)
                child.update()
                
        except Exception as e:
            AppLogger.get_logger().error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã: {str(e)}")
            
    def _connect_signals(self):
        if not self._connections_initialized:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            self.activate_model_btn.clicked.connect(
                lambda: self.model_selected.emit(self.model_combo.currentText())
            )
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
            self.model_combo.currentTextChanged.connect(self._update_current_model)
            
            self._connections_initialized = True
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.source_type.currentIndexChanged.connect(self._update_source_type)
        self.landmarks_check.stateChanged.connect(
            lambda state: self.toggle_landmarks.emit(state == Qt.CheckState.Checked.value)
        )
        self.add_rtsp_btn.clicked.connect(self.add_rtsp_requested.emit)
        self.rtsp_combo.currentTextChanged.connect(self.rtsp_selected.emit)
    
    def _update_current_model(self, model_name):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏"""
        self._current_model_name = model_name
        # –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏
        self.start_btn.setEnabled(False)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å
        self._update_start_button_style()

    def _update_start_button_style(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å–∫–∞"""
        self.start_btn.style().unpolish(self.start_btn)
        self.start_btn.style().polish(self.start_btn)
        self.start_btn.update()

    def _activate_model(self):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–µ"""
        if hasattr(self, '_current_model_name'):
            self.model_selected.emit(self._current_model_name)

    def _update_source_type(self, index):
        placeholders = [
            "–í–≤–µ–¥–∏—Ç–µ –∏–Ω–¥–µ–∫—Å –∫–∞–º–µ—Ä—ã (0, 1, ...)",
            "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É",
            "–í–≤–µ–¥–∏—Ç–µ RTSP URL (rtsp://...)"
        ]
        self.source_input.setPlaceholderText(placeholders[index])
        
        is_file = index == 1
        is_rtsp = index == 2
        
        self.browse_btn.setVisible(is_file)
        self.rtsp_combo.setVisible(is_rtsp)
        self.add_rtsp_btn.setVisible(is_rtsp)
        self.source_input.setVisible(not is_rtsp)
        
        if index == 0:
            self.source_input.setText("0")

    def _browse_file_ui(self):
        """–¢–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
        if self.source_type.currentIndex() == 1:  # –¢–æ–ª—å–∫–æ –¥–ª—è –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤
            file_path, _ = QFileDialog.getOpenFileName(
                self,
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª",
                self.source_input.text() or "",  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –ø—É—Ç–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                "Video Files (*.mp4 *.avi *.mov *.mkv)"
            )
            if file_path:
                self.source_input.setText(file_path)

    def update_frame(self, q_image):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–¥—Ä–∞ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —Ä–∞—Å—Ç—è–∂–µ–Ω–∏–µ–º"""
        if not q_image.isNull():
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
            container_size = self.scroll_area.viewport().size()
            aspect_ratio = q_image.width() / q_image.height()
            
            # –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            max_width = container_size.width()
            max_height = int(max_width / aspect_ratio)
            
            if max_height > container_size.height():
                max_height = container_size.height()
                max_width = int(max_height * aspect_ratio)
            
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            scaled_pixmap = QPixmap.fromImage(q_image).scaled(
                max_width, max_height,
                Qt.AspectRatioMode.KeepAspectRatio,
                Qt.TransformationMode.SmoothTransformation
            )
            
            self.video_display.setPixmap(scaled_pixmap)
            self.video_display.setFixedSize(scaled_pixmap.size())
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            self.video_container.setMinimumSize(container_size)
        
    def show_message(self, message, timeout=0):
        self.status_bar.showMessage(message, timeout)
        
    def show_warning(self, title, message):
        QMessageBox.warning(self, title, message)